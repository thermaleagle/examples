<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.example</groupId>
    <artifactId>json-schema-generator</artifactId>
    <version>1.0-SNAPSHOT</version>

    <properties>
        <maven.compiler.source>17</maven.compiler.source>
        <maven.compiler.target>17</maven.compiler.target>
    </properties>

    <dependencies>
        <!-- Jackson for JSON processing -->
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
            <version>2.15.2</version>
        </dependency>

        <!-- JSON Schema Generator -->
        <dependency>
            <groupId>com.github.victools</groupId>
            <artifactId>jsonschema-generator</artifactId>
            <version>4.30.0</version>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.8.1</version>
                <configuration>
                    <source>17</source>
                    <target>17</target>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>

package com.example;

import org.json.JSONObject;
import org.json.JSONTokener;
import org.json.JSONArray;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.*;

public class JsonSchemaGenerator {

    public static void main(String[] args) {
        String folderPath = "src/main/resources/json_samples"; // Folder with JSON files
        generateSchemaFromFolder(folderPath);
    }

    public static void generateSchemaFromFolder(String folderPath) {
        File folder = new File(folderPath);
        if (!folder.exists() || !folder.isDirectory()) {
            System.out.println("Invalid folder path: " + folderPath);
            return;
        }

        List<JSONObject> jsonObjects = new ArrayList<>();
        Set<String> allKeys = new HashSet<>();
        Map<String, Integer> keyFrequency = new HashMap<>();

        // Read all JSON files in the folder
        File[] files = folder.listFiles((dir, name) -> name.endsWith(".json"));
        if (files == null || files.length == 0) {
            System.out.println("No JSON files found in folder: " + folderPath);
            return;
        }

        for (File file : files) {
            try (FileInputStream fis = new FileInputStream(file)) {
                JSONObject json = new JSONObject(new JSONTokener(fis));
                jsonObjects.add(json);

                // Track all keys and their occurrence count
                for (String key : json.keySet()) {
                    allKeys.add(key);
                    keyFrequency.put(key, keyFrequency.getOrDefault(key, 0) + 1);
                }

            } catch (Exception e) {
                System.out.println("Skipping invalid JSON file: " + file.getName());
            }
        }

        // Determine required properties (must appear in all JSONs)
        Set<String> requiredProperties = new HashSet<>();
        for (String key : keyFrequency.keySet()) {
            if (keyFrequency.get(key) == jsonObjects.size()) {
                requiredProperties.add(key);
            }
        }

        // Generate JSON Schema
        JSONObject schema = new JSONObject();
        schema.put("$schema", "https://json-schema.org/draft/2020-12/schema");
        schema.put("type", "object");

        JSONObject properties = new JSONObject();
        for (String key : allKeys) {
            properties.put(key, inferType(jsonObjects, key));
        }
        schema.put("properties", properties);

        // Add required properties list
        JSONArray requiredArray = new JSONArray();
        requiredProperties.forEach(requiredArray::put);
        schema.put("required", requiredArray);

        System.out.println("Generated JSON Schema:\n" + schema.toString(4));
    }

    private static JSONObject inferType(List<JSONObject> jsonObjects, String key) {
        JSONObject typeObject = new JSONObject();
        Set<String> observedTypes = new HashSet<>();

        for (JSONObject json : jsonObjects) {
            if (json.has(key)) {
                Object value = json.get(key);
                if (value instanceof Integer) {
                    observedTypes.add("integer");
                } else if (value instanceof Double) {
                    observedTypes.add("number");
                } else if (value instanceof Boolean) {
                    observedTypes.add("boolean");
                } else if (value instanceof JSONObject) {
                    observedTypes.add("object");
                } else if (value instanceof JSONArray) {
                    observedTypes.add("array");
                } else {
                    observedTypes.add("string");
                }
            }
        }

        // If multiple types found, set "anyOf"
        if (observedTypes.size() > 1) {
            JSONArray anyOfArray = new JSONArray();
            for (String type : observedTypes) {
                JSONObject typeEntry = new JSONObject();
                typeEntry.put("type", type);
                anyOfArray.put(typeEntry);
            }
            typeObject.put("anyOf", anyOfArray);
        } else {
            typeObject.put("type", observedTypes.iterator().next());
        }

        return typeObject;
    }
}