package com.example;

import org.json.JSONArray;
import org.json.JSONObject;
import org.json.JSONTokener;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.*;

public class JsonSchemaGenerator {

    public static void main(String[] args) {
        String folderPath = "src/main/resources/json_samples"; // Folder with JSON files
        generateSchemaFromFolder(folderPath);
    }

    public static void generateSchemaFromFolder(String folderPath) {
        File folder = new File(folderPath);
        if (!folder.exists() || !folder.isDirectory()) {
            System.out.println("Invalid folder path: " + folderPath);
            return;
        }

        List<JSONObject> jsonObjects = new ArrayList<>();
        Set<String> allKeys = new HashSet<>();
        Map<String, Integer> keyFrequency = new HashMap<>();

        // Read all JSON files in the folder
        File[] files = folder.listFiles((dir, name) -> name.endsWith(".json"));
        if (files == null || files.length == 0) {
            System.out.println("No JSON files found in folder: " + folderPath);
            return;
        }

        for (File file : files) {
            try (FileInputStream fis = new FileInputStream(file)) {
                JSONObject json = new JSONObject(new JSONTokener(fis));
                jsonObjects.add(json);

                // Track all keys and their occurrence count
                for (String key : json.keySet()) {
                    allKeys.add(key);
                    keyFrequency.put(key, keyFrequency.getOrDefault(key, 0) + 1);
                }

            } catch (Exception e) {
                System.out.println("Skipping invalid JSON file: " + file.getName());
            }
        }

        // Determine required properties (must appear in all JSONs)
        Set<String> requiredProperties = new HashSet<>();
        for (String key : keyFrequency.keySet()) {
            if (keyFrequency.get(key) == jsonObjects.size()) {
                requiredProperties.add(key);
            }
        }

        // Generate JSON Schema
        JSONObject schema = new JSONObject();
        schema.put("$schema", "https://json-schema.org/draft/2020-12/schema");
        schema.put("type", "object");

        JSONObject properties = new JSONObject();
        for (String key : allKeys) {
            properties.put(key, inferType(jsonObjects, key));
        }
        schema.put("properties", properties);

        // Add required properties list
        JSONArray requiredArray = new JSONArray();
        requiredProperties.forEach(requiredArray::put);
        schema.put("required", requiredArray);

        System.out.println("Generated JSON Schema:\n" + schema.toString(4));
    }

    private static JSONObject inferType(List<JSONObject> jsonObjects, String key) {
        JSONObject typeObject = new JSONObject();
        Set<String> observedTypes = new HashSet<>();
        List<Object> arraySamples = new ArrayList<>();

        for (JSONObject json : jsonObjects) {
            if (json.has(key)) {
                Object value = json.get(key);

                if (value instanceof Integer) {
                    observedTypes.add("integer");
                } else if (value instanceof Double) {
                    observedTypes.add("number");
                } else if (value instanceof Boolean) {
                    observedTypes.add("boolean");
                } else if (value instanceof JSONObject) {
                    observedTypes.add("object");
                    typeObject.put("properties", inferNestedObject((JSONObject) value));
                } else if (value instanceof JSONArray) {
                    observedTypes.add("array");

                    JSONArray jsonArray = (JSONArray) value;
                    if (!jsonArray.isEmpty()) {
                        arraySamples.add(jsonArray.get(0));
                    }
                } else {
                    observedTypes.add("string");
                }
            }
        }

        // Handle arrays properly
        if (observedTypes.contains("array")) {
            JSONArray itemsArray = new JSONArray();
            for (Object sample : arraySamples) {
                JSONObject arraySchema = new JSONObject();
                if (sample instanceof Integer) {
                    arraySchema.put("type", "integer");
                } else if (sample instanceof Double) {
                    arraySchema.put("type", "number");
                } else if (sample instanceof Boolean) {
                    arraySchema.put("type", "boolean");
                } else if (sample instanceof JSONObject) {
                    arraySchema.put("type", "object");
                    arraySchema.put("properties", inferNestedObject((JSONObject) sample));
                } else {
                    arraySchema.put("type", "string");
                }
                itemsArray.put(arraySchema);
            }
            typeObject.put("type", "array");
            typeObject.put("items", itemsArray.length() == 1 ? itemsArray.get(0) : itemsArray);
        }
        // Handle objects with multiple possible types (anyOf)
        else if (observedTypes.size() > 1) {
            JSONArray anyOfArray = new JSONArray();
            for (String type : observedTypes) {
                JSONObject typeEntry = new JSONObject();
                typeEntry.put("type", type);
                anyOfArray.put(typeEntry);
            }
            typeObject.put("anyOf", anyOfArray);
        }
        // Handle single-type fields
        else {
            typeObject.put("type", observedTypes.iterator().next());
        }

        return typeObject;
    }

    private static JSONObject inferNestedObject(JSONObject jsonObject) {
        JSONObject properties = new JSONObject();
        for (String key : jsonObject.keySet()) {
            Object value = jsonObject.get(key);
            JSONObject propertySchema = new JSONObject();

            if (value instanceof Integer) {
                propertySchema.put("type", "integer");
            } else if (value instanceof Double) {
                propertySchema.put("type", "number");
            } else if (value instanceof Boolean) {
                propertySchema.put("type", "boolean");
            } else if (value instanceof JSONObject) {
                propertySchema.put("type", "object");
                propertySchema.put("properties", inferNestedObject((JSONObject) value));
            } else if (value instanceof JSONArray) {
                propertySchema.put("type", "array");
                JSONArray jsonArray = (JSONArray) value;
                if (!jsonArray.isEmpty()) {
                    propertySchema.put("items", inferNestedObject(jsonArray.getJSONObject(0)));
                }
            } else {
                propertySchema.put("type", "string");
            }
            properties.put(key, propertySchema);
        }
        return properties;
    }
}