Slide 1: Title Slide
- Title: “How AI Helped Me Build a Better Housekeeping Pipeline”
- Your name, role, team
- Date / Event name (if applicable)

Slide 2: The Problem
- Shift to trunk-based development
- 1400+ repositories, ~180,000 branches
- Lack of visibility, high tech debt
- Manual cleanup wasn't scalable

Slide 3: Initial Attempts
- Jenkins pipeline pulling Bitbucket stats
- Collected data daily
- Shared spreadsheet with teams
- Helped drive awareness but slow and brittle

Slide 4: Early Wins with AI
- Used GitHub Copilot to write and optimize Groovy scripts
- Helped break down complex logic quickly
- Saved time on boilerplate, improved code clarity

Slide 5: Pivot Moment
- Pipeline stopped after ~54 repos
- Discovered limitations in sequential processing
- Needed a smarter and more scalable model

Slide 6: The New Architecture
- Director–Lieutenant model
  - Director: splits work
  - Lieutenants: parallel batch processing
- Improved speed and coverage dramatically

Slide 7: Guardrails and Risk Mitigation
- Feature flags to control behavior
- Activation date to protect new branches
- Focused on safe, testable changes

Slide 8: Enhanced Reporting
- Tribe-wise summary → final department-level report
- Tabular + visual insights
- Clear actions, easy to navigate

Slide 9: Role of AI Throughout
- Copilot for coding, refactoring
- Prompt-based brainstorming
- Iterative enhancements based on AI suggestions

Slide 10: Impact & Outcome
- Hundreds of stale branches cleaned
- Weekly hygiene visible to 20+ teams
- Team-wide engagement & proactive cleanups

Slide 11: Key Takeaways
- Start simple, scale responsibly
- Use AI as a thinking and coding partner
- Design for safety, clarity, and iteration

Slide 12: Thank You / Q&A
- Invite questions
- Optional: share GitHub link or QR code if demo available
